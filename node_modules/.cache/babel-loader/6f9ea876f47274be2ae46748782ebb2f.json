{"ast":null,"code":"export const getParentRouter = (path, list) => {\n  // 深度遍历查找\n  const dfs = (list, path, parents) => {\n    for (let val of list) {\n      let item = {\n        name: val.name,\n        path: val.path,\n        basePath: val.basePath,\n        id: val.id,\n        isTab: val.isTab\n      };\n\n      if (path.startsWith(item.basePath) && item.basePath !== '') {\n        parents.push(item);\n        return parents;\n      }\n\n      if (val.children) {\n        parents.push(item);\n        if (dfs(val.children, path, parents).length) return parents;\n        parents.pop();\n      }\n    }\n\n    return [];\n  };\n\n  return dfs(list, path, []);\n};\n/**\n * 把search字符串转成json（也可以用node中url解析）\n * @param str 传入的search字符串\n * @return 返回json\n */\n\nexport function filterSearch(str) {\n  let json = {};\n  str = str.substr(1);\n  const list = str.split('&');\n\n  for (let val of list) {\n    const splitJson = val.split('=');\n    json[splitJson[0]] = splitJson[1];\n  }\n\n  return json;\n}","map":{"version":3,"sources":["/Users/youn/Documents/younFolder/Demo/react-electron-pc/src/routers/routersCommon.ts"],"names":["getParentRouter","path","list","dfs","parents","val","item","name","basePath","id","isTab","startsWith","push","children","length","pop","filterSearch","str","json","substr","split","splitJson"],"mappings":"AAKA,OAAO,MAAMA,eAAe,GAAG,CAACC,IAAD,EAAeC,IAAf,KAA+D;AAC5F;AACA,QAAMC,GAAG,GAAG,CACVD,IADU,EAEVD,IAFU,EAGVG,OAHU,KAIa;AACvB,SAAK,IAAIC,GAAT,IAAgBH,IAAhB,EAAsB;AACpB,UAAII,IAAsB,GAAG;AAC3BC,QAAAA,IAAI,EAAEF,GAAG,CAACE,IADiB;AAE3BN,QAAAA,IAAI,EAAEI,GAAG,CAACJ,IAFiB;AAG3BO,QAAAA,QAAQ,EAAEH,GAAG,CAACG,QAHa;AAI3BC,QAAAA,EAAE,EAAEJ,GAAG,CAACI,EAJmB;AAK3BC,QAAAA,KAAK,EAAEL,GAAG,CAACK;AALgB,OAA7B;;AAOA,UAAIT,IAAI,CAACU,UAAL,CAAgBL,IAAI,CAACE,QAArB,KAAkCF,IAAI,CAACE,QAAL,KAAkB,EAAxD,EAA4D;AAC1DJ,QAAAA,OAAO,CAACQ,IAAR,CAAaN,IAAb;AACA,eAAOF,OAAP;AACD;;AACD,UAAIC,GAAG,CAACQ,QAAR,EAAkB;AAChBT,QAAAA,OAAO,CAACQ,IAAR,CAAaN,IAAb;AACA,YAAIH,GAAG,CAACE,GAAG,CAACQ,QAAL,EAAeZ,IAAf,EAAqBG,OAArB,CAAH,CAAiCU,MAArC,EAA6C,OAAOV,OAAP;AAC7CA,QAAAA,OAAO,CAACW,GAAR;AACD;AACF;;AACD,WAAO,EAAP;AACD,GAxBD;;AAyBA,SAAOZ,GAAG,CAACD,IAAD,EAAOD,IAAP,EAAa,EAAb,CAAV;AACD,CA5BM;AA8BP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASe,YAAT,CAAsBC,GAAtB,EAA8C;AACnD,MAAIC,IAAe,GAAG,EAAtB;AACAD,EAAAA,GAAG,GAAGA,GAAG,CAACE,MAAJ,CAAW,CAAX,CAAN;AACA,QAAMjB,IAAI,GAAGe,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAb;;AACA,OAAK,IAAIf,GAAT,IAAgBH,IAAhB,EAAsB;AACpB,UAAMmB,SAAS,GAAGhB,GAAG,CAACe,KAAJ,CAAU,GAAV,CAAlB;AACAF,IAAAA,IAAI,CAACG,SAAS,CAAC,CAAD,CAAV,CAAJ,GAAqBA,SAAS,CAAC,CAAD,CAA9B;AACD;;AACD,SAAOH,IAAP;AACD","sourcesContent":["import { StringKey } from '@/typings/common';\nimport { RoutersConfigIF, RoutersModelIF } from '@/typings/router';\ninterface MenuBreadcrumbIF extends RoutersModelIF {\n  basePath: string;\n}\nexport const getParentRouter = (path: string, list: RoutersConfigIF[]): MenuBreadcrumbIF[] => {\n  // 深度遍历查找\n  const dfs = (\n    list: RoutersConfigIF[],\n    path: string,\n    parents: MenuBreadcrumbIF[]\n  ): MenuBreadcrumbIF[] => {\n    for (let val of list) {\n      let item: MenuBreadcrumbIF = {\n        name: val.name,\n        path: val.path,\n        basePath: val.basePath,\n        id: val.id,\n        isTab: val.isTab,\n      };\n      if (path.startsWith(item.basePath) && item.basePath !== '') {\n        parents.push(item);\n        return parents;\n      }\n      if (val.children) {\n        parents.push(item);\n        if (dfs(val.children, path, parents).length) return parents;\n        parents.pop();\n      }\n    }\n    return [];\n  };\n  return dfs(list, path, []);\n};\n\n/**\n * 把search字符串转成json（也可以用node中url解析）\n * @param str 传入的search字符串\n * @return 返回json\n */\nexport function filterSearch(str: string): StringKey {\n  let json: StringKey = {};\n  str = str.substr(1);\n  const list = str.split('&');\n  for (let val of list) {\n    const splitJson = val.split('=');\n    json[splitJson[0]] = splitJson[1];\n  }\n  return json;\n}\n"]},"metadata":{},"sourceType":"module"}