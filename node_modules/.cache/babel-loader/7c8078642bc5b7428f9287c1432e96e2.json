{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport routerInsiderConfig from '@/routers/routerInsiderConfig';\nimport { addMenuList } from '@/store/actionCreators/public';\nimport { listFlat } from '@/utils';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { dropByCacheKey } from 'react-router-cache-route';\nimport { useHistory } from 'react-router-dom';\n\nfunction useCloseRouter() {\n  _s();\n\n  const result = useSelector(state => state.publicReducer);\n  const menuTab = result.menuTab;\n  const currentTabIndex = result.currentTabIndex;\n  const menuTabList = menuTab[currentTabIndex];\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const routerList = listFlat(routerInsiderConfig);\n  const findMenuActiveIdx = menuTabList.findIndex(item => item.active); // 关闭当前路由跳转到上一路由并刷新\n\n  const closeRouter = () => {\n    var _menuTabList$findMenu;\n\n    const newList = [...menuTab];\n    const currentPathList = (_menuTabList$findMenu = menuTabList[findMenuActiveIdx]) === null || _menuTabList$findMenu === void 0 ? void 0 : _menuTabList$findMenu.pathList;\n    const newTab = routerList.filter(item => currentPathList[currentPathList.length - 2].path.startsWith(item.basePath));\n    dropByCacheKey(newTab[0].basePath);\n    setTimeout(() => {\n      history.push({\n        pathname: currentPathList[currentPathList.length - 2].path,\n        state: currentPathList[currentPathList.length - 2].state\n      });\n      newList[currentTabIndex][findMenuActiveIdx].pathList = currentPathList.slice(0, currentPathList.length - 1);\n      dispatch(addMenuList(newList));\n    }, 100);\n  };\n\n  return closeRouter;\n}\n\n_s(useCloseRouter, \"iZsayeLbQRALNwUpb8hPdhRBmjY=\", false, function () {\n  return [useSelector, useHistory, useDispatch];\n});\n\nexport default useCloseRouter;","map":{"version":3,"sources":["/Users/youn/Documents/younFolder/Demo/react-electron-pc/src/components/useCloseRouter.tsx"],"names":["routerInsiderConfig","addMenuList","listFlat","useDispatch","useSelector","dropByCacheKey","useHistory","useCloseRouter","result","state","publicReducer","menuTab","currentTabIndex","menuTabList","history","dispatch","routerList","findMenuActiveIdx","findIndex","item","active","closeRouter","newList","currentPathList","pathList","newTab","filter","length","path","startsWith","basePath","setTimeout","push","pathname","slice"],"mappings":";;AAAA,OAAOA,mBAAP,MAAgC,+BAAhC;AACA,SAASC,WAAT,QAA4B,+BAA5B;AAGA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,SAASC,cAAT,GAAoC;AAAA;;AAClC,QAAMC,MAAM,GAAGJ,WAAW,CAAkCK,KAAD,IAAWA,KAAK,CAACC,aAAlD,CAA1B;AACA,QAAMC,OAAO,GAAGH,MAAM,CAACG,OAAvB;AACA,QAAMC,eAAe,GAAGJ,MAAM,CAACI,eAA/B;AACA,QAAMC,WAAW,GAAGF,OAAO,CAACC,eAAD,CAA3B;AACA,QAAME,OAAO,GAAGR,UAAU,EAA1B;AACA,QAAMS,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,UAAU,GAAGd,QAAQ,CAACF,mBAAD,CAA3B;AACA,QAAMiB,iBAAiB,GAAGJ,WAAW,CAACK,SAAZ,CAAuBC,IAAD,IAAUA,IAAI,CAACC,MAArC,CAA1B,CARkC,CAUlC;;AACA,QAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,UAAMC,OAAO,GAAG,CAAC,GAAGX,OAAJ,CAAhB;AACA,UAAMY,eAAe,4BAAGV,WAAW,CAACI,iBAAD,CAAd,0DAAG,sBAAgCO,QAAxD;AACA,UAAMC,MAAM,GAAGT,UAAU,CAACU,MAAX,CAAmBP,IAAD,IAC/BI,eAAe,CAACA,eAAe,CAACI,MAAhB,GAAyB,CAA1B,CAAf,CAA4CC,IAA5C,CAAiDC,UAAjD,CAA4DV,IAAI,CAACW,QAAjE,CADa,CAAf;AAGAzB,IAAAA,cAAc,CAACoB,MAAM,CAAC,CAAD,CAAN,CAAUK,QAAX,CAAd;AACAC,IAAAA,UAAU,CAAC,MAAM;AACfjB,MAAAA,OAAO,CAACkB,IAAR,CAAa;AACXC,QAAAA,QAAQ,EAAEV,eAAe,CAACA,eAAe,CAACI,MAAhB,GAAyB,CAA1B,CAAf,CAA4CC,IAD3C;AAEXnB,QAAAA,KAAK,EAAEc,eAAe,CAACA,eAAe,CAACI,MAAhB,GAAyB,CAA1B,CAAf,CAA4ClB;AAFxC,OAAb;AAIAa,MAAAA,OAAO,CAACV,eAAD,CAAP,CAAyBK,iBAAzB,EAA4CO,QAA5C,GAAuDD,eAAe,CAACW,KAAhB,CACrD,CADqD,EAErDX,eAAe,CAACI,MAAhB,GAAyB,CAF4B,CAAvD;AAIAZ,MAAAA,QAAQ,CAACd,WAAW,CAACqB,OAAD,CAAZ,CAAR;AACD,KAVS,EAUP,GAVO,CAAV;AAWD,GAlBD;;AAoBA,SAAOD,WAAP;AACD;;GAhCQd,c;UACQH,W,EAICE,U,EACCH,W;;;AA2BnB,eAAeI,cAAf","sourcesContent":["import routerInsiderConfig from '@/routers/routerInsiderConfig';\nimport { addMenuList } from '@/store/actionCreators/public';\nimport { PublicReducerIF } from '@/store/reducers';\nimport { PublicStateIF } from '@/store/states/public';\nimport { listFlat } from '@/utils';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { dropByCacheKey } from 'react-router-cache-route';\nimport { useHistory } from 'react-router-dom';\n\nfunction useCloseRouter(): Function {\n  const result = useSelector<PublicReducerIF, PublicStateIF>((state) => state.publicReducer);\n  const menuTab = result.menuTab;\n  const currentTabIndex = result.currentTabIndex;\n  const menuTabList = menuTab[currentTabIndex];\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const routerList = listFlat(routerInsiderConfig);\n  const findMenuActiveIdx = menuTabList.findIndex((item) => item.active);\n\n  // 关闭当前路由跳转到上一路由并刷新\n  const closeRouter = () => {\n    const newList = [...menuTab];\n    const currentPathList = menuTabList[findMenuActiveIdx]?.pathList;\n    const newTab = routerList.filter((item) =>\n      currentPathList[currentPathList.length - 2].path.startsWith(item.basePath)\n    );\n    dropByCacheKey(newTab[0].basePath);\n    setTimeout(() => {\n      history.push({\n        pathname: currentPathList[currentPathList.length - 2].path,\n        state: currentPathList[currentPathList.length - 2].state,\n      });\n      newList[currentTabIndex][findMenuActiveIdx].pathList = currentPathList.slice(\n        0,\n        currentPathList.length - 1\n      );\n      dispatch(addMenuList(newList));\n    }, 100);\n  };\n\n  return closeRouter;\n}\nexport default useCloseRouter;\n"]},"metadata":{},"sourceType":"module"}