{"ast":null,"code":"import theme from '@/assets/variableChange';\n// 判断是否是electron\nexport const isElectron = navigator.userAgent.includes('Electron'); // 定义的几套主题颜色\n\nexport const themeList = [theme.theme, theme.redTheme, theme.blueTheme, theme.greenTheme];\nexport const electron = window.electron;\nexport const ipcRenderer = window.ipcRenderer;\n/**\n * 查找tree中所有父节点\n * @param {*} data 整个tree\n * @param {*} id 需要查找的id\n * @param {*} indexArray 空数组\n * @return 返回 查找的数组\n */\n\nexport const findAllParent = (data, id, indexArray) => {\n  let arr = Array.from(indexArray);\n\n  for (let val of data) {\n    arr.push(val.id);\n\n    if (val.id === id) {\n      return arr;\n    }\n\n    let children = val.children;\n\n    if (children && children.length) {\n      let result = findAllParent(children, id, arr);\n      if (result) return result;\n    }\n\n    arr.pop();\n  }\n\n  return false;\n}; // 递归查找组织id\n\nexport const recursionFind = (data, equal) => {\n  for (let val of data) {\n    if (val.path === equal) {\n      return val;\n    } else if (val.children) {\n      recursionFind(val.children, equal);\n    }\n  }\n\n  return data[0];\n}; // 路由扁平\n\nexport const listFlat = (list, newList = []) => {\n  for (let val of list) {\n    if (val.path !== '') {\n      newList.push(val);\n    }\n\n    if (val.children) {\n      listFlat(val.children, newList);\n    }\n  }\n\n  return newList;\n};","map":{"version":3,"sources":["/Users/youn/Documents/younFolder/Demo/react-electron-pc/src/utils/basic.ts"],"names":["theme","isElectron","navigator","userAgent","includes","themeList","redTheme","blueTheme","greenTheme","electron","window","ipcRenderer","findAllParent","data","id","indexArray","arr","Array","from","val","push","children","length","result","pop","recursionFind","equal","path","listFlat","list","newList"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AAEA;AACA,OAAO,MAAMC,UAAmB,GAAGC,SAAS,CAACC,SAAV,CAAoBC,QAApB,CAA6B,UAA7B,CAA5B,C,CACP;;AACA,OAAO,MAAMC,SAAS,GAAG,CAACL,KAAK,CAACA,KAAP,EAAcA,KAAK,CAACM,QAApB,EAA8BN,KAAK,CAACO,SAApC,EAA+CP,KAAK,CAACQ,UAArD,CAAlB;AAEP,OAAO,MAAMC,QAAQ,GAAGC,MAAM,CAACD,QAAxB;AACP,OAAO,MAAME,WAAW,GAAGD,MAAM,CAACC,WAA3B;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA,OAAO,MAAMC,aAAa,GAAG,CAC3BC,IAD2B,EAE3BC,EAF2B,EAG3BC,UAH2B,KAIJ;AACvB,MAAIC,GAAa,GAAGC,KAAK,CAACC,IAAN,CAAWH,UAAX,CAApB;;AACA,OAAK,IAAII,GAAT,IAAgBN,IAAhB,EAAsB;AACpBG,IAAAA,GAAG,CAACI,IAAJ,CAASD,GAAG,CAACL,EAAb;;AACA,QAAIK,GAAG,CAACL,EAAJ,KAAWA,EAAf,EAAmB;AACjB,aAAOE,GAAP;AACD;;AACD,QAAIK,QAAQ,GAAGF,GAAG,CAACE,QAAnB;;AACA,QAAIA,QAAQ,IAAIA,QAAQ,CAACC,MAAzB,EAAiC;AAC/B,UAAIC,MAAM,GAAGX,aAAa,CAACS,QAAD,EAAWP,EAAX,EAAeE,GAAf,CAA1B;AACA,UAAIO,MAAJ,EAAY,OAAOA,MAAP;AACb;;AACDP,IAAAA,GAAG,CAACQ,GAAJ;AACD;;AACD,SAAO,KAAP;AACD,CAnBM,C,CAqBP;;AAKA,OAAO,MAAMC,aAAa,GAAG,CAA4BZ,IAA5B,EAAuCa,KAAvC,KAA4D;AACvF,OAAK,IAAIP,GAAT,IAAgBN,IAAhB,EAAsB;AACpB,QAAIM,GAAG,CAACQ,IAAJ,KAAaD,KAAjB,EAAwB;AACtB,aAAOP,GAAP;AACD,KAFD,MAEO,IAAIA,GAAG,CAACE,QAAR,EAAkB;AACvBI,MAAAA,aAAa,CAACN,GAAG,CAACE,QAAL,EAAeK,KAAf,CAAb;AACD;AACF;;AACD,SAAOb,IAAI,CAAC,CAAD,CAAX;AACD,CATM,C,CAWP;;AACA,OAAO,MAAMe,QAAQ,GAAG,CACtBC,IADsB,EAEtBC,OAA0B,GAAG,EAFP,KAGA;AACtB,OAAK,IAAIX,GAAT,IAAgBU,IAAhB,EAAsB;AACpB,QAAIV,GAAG,CAACQ,IAAJ,KAAa,EAAjB,EAAqB;AACnBG,MAAAA,OAAO,CAACV,IAAR,CAAaD,GAAb;AACD;;AACD,QAAIA,GAAG,CAACE,QAAR,EAAkB;AAChBO,MAAAA,QAAQ,CAACT,GAAG,CAACE,QAAL,EAAeS,OAAf,CAAR;AACD;AACF;;AACD,SAAOA,OAAP;AACD,CAbM","sourcesContent":["import theme from '@/assets/variableChange';\nimport { RoutersConfigIF } from '@/typings/router';\n// 判断是否是electron\nexport const isElectron: boolean = navigator.userAgent.includes('Electron');\n// 定义的几套主题颜色\nexport const themeList = [theme.theme, theme.redTheme, theme.blueTheme, theme.greenTheme];\n\nexport const electron = window.electron;\nexport const ipcRenderer = window.ipcRenderer;\n\n/**\n * 查找tree中所有父节点\n * @param {*} data 整个tree\n * @param {*} id 需要查找的id\n * @param {*} indexArray 空数组\n * @return 返回 查找的数组\n */\ninterface Test {\n  id: number;\n  path: string;\n  children: Test[];\n}\nexport const findAllParent = <T extends Test>(\n  data: T[],\n  id: number,\n  indexArray: number[]\n): boolean | number[] => {\n  let arr: number[] = Array.from(indexArray);\n  for (let val of data) {\n    arr.push(val.id);\n    if (val.id === id) {\n      return arr;\n    }\n    let children = val.children;\n    if (children && children.length) {\n      let result = findAllParent(children, id, arr);\n      if (result) return result;\n    }\n    arr.pop();\n  }\n  return false;\n};\n\n// 递归查找组织id\ninterface RecursionFindIF {\n  path: string;\n  children?: RecursionFindIF[];\n}\nexport const recursionFind = <T extends RecursionFindIF>(data: T[], equal: string): T => {\n  for (let val of data) {\n    if (val.path === equal) {\n      return val;\n    } else if (val.children) {\n      recursionFind(val.children, equal);\n    }\n  }\n  return data[0];\n};\n\n// 路由扁平\nexport const listFlat = (\n  list: RoutersConfigIF[],\n  newList: RoutersConfigIF[] = []\n): RoutersConfigIF[] => {\n  for (let val of list) {\n    if (val.path !== '') {\n      newList.push(val);\n    }\n    if (val.children) {\n      listFlat(val.children, newList);\n    }\n  }\n  return newList;\n};\n"]},"metadata":{},"sourceType":"module"}