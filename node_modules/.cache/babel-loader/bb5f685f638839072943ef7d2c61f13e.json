{"ast":null,"code":"import axios from 'axios';\nimport { CodeMessage } from './codeMessage';\nimport { message, notification } from 'antd';\nimport { hideLoading, showLoading } from './httpLoading.js';\n\nconst openNotificationWithIcon = () => {\n  notification.error({\n    message: '用户令牌失效',\n    duration: 2,\n    description: '2s后跳转到登录界面'\n  });\n};\n\n/**\n * 配置baseUrl\n * @return 配置baseUrl\n */\nconst getBaseUrl = () => {\n  let baseUrl; // 判断生产环境和测试环境\n\n  const env = process.env;\n  const type = env.REACT_APP_ENV; // 判断浏览器(是electron才能用生产接口)\n  // const isElectron = navigator.userAgent.includes('Electron');\n  // console.log(isElectron);\n  // console.log(type);\n\n  switch (type) {\n    case 'dev':\n      // 测试环境\n      baseUrl = env.REACT_APP_DEV;\n      break;\n\n    case 'test':\n      // 测试环境\n      baseUrl = env.REACT_APP_TEST;\n      break;\n\n    case 'bug':\n      // bug环境\n      baseUrl = env.REACT_APP_BUG;\n      break;\n\n    case 'prod':\n      // 生产环境\n      baseUrl = env.REACT_APP_PROD;\n      break;\n\n    default:\n      // 开发环境\n      // baseUrl = env.REACT_APP_TEST!;\n      // baseUrl = env.REACT_APP_BUG!;\n      baseUrl = '/api';\n      break;\n  }\n\n  return baseUrl;\n};\n/**\n * @baseURL 基本rul\n * @timeout 设置超时时间\n */\n\n\nclass JiayunAxios {\n  constructor(baseURL, timeout) {\n    this.instance = void 0;\n\n    this.setInterceptors = instance => {\n      // 请求拦截器\n      instance.interceptors.request.use(config => {\n        // 设置头部\n        config.headers['access-source'] = 'cwq9r3rZwyYsSStqDmiJ5A7pp4YQtcGt';\n\n        if (config.url) {\n          // 加token的判断 (加true 不加false)\n          if (config.headers.isToken) {\n            const token = sessionStorage.getItem('token');\n            config.headers['Authorization'] = token ? token : '';\n            delete config.headers.isToken;\n          }\n        } // 根据需要显示，在header中加入isLoding ture显示loading\n\n\n        if (config.headers.isLoading) {\n          showLoading();\n          delete config.headers.isLoading;\n        }\n\n        return config;\n      }, err => Promise.reject(err)); // 响应拦截器\n\n      instance.interceptors.response.use(response => {\n        // 移除loading\n        hideLoading(); // 修改成功返回为data = null 在组件中一律判断null不为空即可\n\n        let {\n          success,\n          data\n        } = response.data;\n\n        if (success && data === null) {\n          response.data.data = {};\n        }\n\n        return response;\n      }, err => {\n        var _err$response;\n\n        // 移除loading\n        hideLoading(); // 超时处理\n\n        if (err.message.includes('timeout')) {\n          message.error('链接超时，请稍后重试', 5);\n        } // 错误代码处理\n\n\n        if ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) {\n          // 响应错误码提示;\n          this._httpsHandle(err.response.data);\n\n          message.error(CodeMessage[err.response.status], 5);\n          return Promise.reject(err.response);\n        } // 断网处理  跳转到断网页面\n\n\n        if (!window.navigator.onLine) {\n          message.error('网络链接失败', 5);\n          return -1;\n        }\n\n        return Promise.reject(err);\n      });\n    };\n\n    this.requstAll = ({\n      url,\n      params,\n      type,\n      isLoading,\n      successMessage,\n      error,\n      method\n    }) => {\n      const headers = this._setHeaders({\n        type,\n        isLoading,\n        url\n      });\n\n      const data = method === 'post' ? 'data' : 'params';\n\n      if (params && params.hasOwnProperty('isLoading')) {\n        delete params['isLoading'];\n      }\n\n      return new Promise((resolve, reject) => {\n        this.instance({\n          method,\n          url,\n          [data]: params,\n          headers\n        }).then(res => {\n          const data = res.data;\n\n          this._showError(data, successMessage, error);\n\n          if (data.success) {\n            resolve(data.data);\n          }\n        }).catch(err => {\n          reject(err);\n        });\n      });\n    };\n\n    this.axiosPost = async ({\n      url,\n      params,\n      type,\n      isLoading,\n      successMessage,\n      error\n    }) => {\n      return await this.requstAll({\n        url,\n        params,\n        type,\n        isLoading,\n        successMessage,\n        error,\n        method: 'post'\n      });\n    };\n\n    this.axiosGet = async ({\n      url,\n      params,\n      type,\n      isLoading,\n      successMessage,\n      error\n    }) => {\n      return await this.requstAll({\n        url,\n        params,\n        type,\n        isLoading,\n        successMessage,\n        error,\n        method: 'get'\n      });\n    };\n\n    this.axiosDelete = async ({\n      url,\n      params,\n      type,\n      isLoading,\n      successMessage,\n      error\n    }) => {\n      return await this.requstAll({\n        url,\n        params,\n        type,\n        isLoading,\n        successMessage,\n        error,\n        method: 'delete'\n      });\n    };\n\n    this._showError = (data, successMessage, error) => {\n      // 显示传入的接口成功的提示消息\n      if (data.success && successMessage) {\n        message.success(successMessage);\n      } // 显示错误信息\n\n\n      if (!data.success && error !== 'no') {\n        message.error(error ? error : data.stateInfo, 5);\n      }\n    };\n\n    this._setHeaders = ({\n      type,\n      isLoading,\n      url\n    }) => {\n      let headers = {\n        'Content-Type': 'application/json',\n        isLoading,\n        isToken: true\n      };\n\n      if (url.includes('不需要token的接口')) {\n        headers.isToken = false;\n      }\n\n      if (type === 'json') {\n        headers['Content-Type'] = 'application/json';\n      } else {\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      }\n\n      return headers;\n    };\n\n    this.instance = axios.create({\n      baseURL,\n      timeout\n    });\n    this.setInterceptors(this.instance);\n  }\n  /**\n   * 设置拦截器\n   */\n\n\n  /**\n   * get获取二进制流中的文件\n   *@url 请求地址\n   *@params 请求参数\n   */\n  fetchGetFile({\n    url,\n    params,\n    type,\n    isLoading\n  }) {\n    const headers = this._setHeaders({\n      type,\n      isLoading,\n      url\n    });\n\n    return new Promise((resolve, reject) => {\n      this.instance({\n        method: 'get',\n        url,\n        params,\n        headers,\n        responseType: 'blob'\n      }).then(res => {\n        const data = res.data;\n        resolve(data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 错误处理\n   * @data\n   * @successMessage\n   * @error\n   */\n\n\n  // http错误代码中的特殊处理\n  _httpsHandle(data) {\n    if (data.stateCode === '30000004') {\n      openNotificationWithIcon();\n      setTimeout(() => {\n        window.location.href = '/';\n      }, 2000);\n    }\n  }\n\n}\n\nconst JYAxios = new JiayunAxios(getBaseUrl(), 10000);\nexport { JYAxios };","map":{"version":3,"sources":["/Users/youn/Documents/younFolder/Demo/react-electron-pc/src/services/axios.ts"],"names":["axios","CodeMessage","message","notification","hideLoading","showLoading","openNotificationWithIcon","error","duration","description","getBaseUrl","baseUrl","env","process","type","REACT_APP_ENV","REACT_APP_DEV","REACT_APP_TEST","REACT_APP_BUG","REACT_APP_PROD","JiayunAxios","constructor","baseURL","timeout","instance","setInterceptors","interceptors","request","use","config","headers","url","isToken","token","sessionStorage","getItem","isLoading","err","Promise","reject","response","success","data","includes","status","_httpsHandle","window","navigator","onLine","requstAll","params","successMessage","method","_setHeaders","hasOwnProperty","resolve","then","res","_showError","catch","axiosPost","axiosGet","axiosDelete","stateInfo","create","fetchGetFile","responseType","stateCode","setTimeout","location","href","JYAxios"],"mappings":"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","sourcesContent":["import axios, { AxiosInstance, AxiosResponse, AxiosRequestConfig } from 'axios';\nimport { CodeMessage } from './codeMessage';\nimport { message, notification } from 'antd';\nimport { HttpCode, ResponseData } from '@/typings/common';\nimport { hideLoading, showLoading } from './httpLoading.js';\n\nconst openNotificationWithIcon = () => {\n  notification.error({\n    message: '用户令牌失效',\n    duration: 2,\n    description: '2s后跳转到登录界面',\n  });\n};\ninterface HeadersModelIF {\n  // 数据类型\n  type: 'json' | 'fromdata';\n  // 是否显示loading\n  isLoading: boolean;\n  url: string;\n}\n\n// 错误提示\ninterface ErrorMessageIF {\n  response: { status: HttpCode; data: ResponseData<null> };\n  message: string;\n}\n\ninterface AxiosParams extends HeadersModelIF {\n  // 请求地址\n  url: string;\n  // 请求参数\n  params?: { [propName: string]: any };\n  // 成功后需要提示的文字，不传不提示\n  successMessage?: string | undefined;\n  // 是否显示错误提示 默认提示接口返回的错误提示\n  // 'no'不需要显示  '错误提示'传入具体的值显示值\n  error?: string;\n  method?: 'get' | 'delete' | 'post' | 'put' | undefined;\n}\n/**\n * 配置baseUrl\n * @return 配置baseUrl\n */\nconst getBaseUrl = (): string => {\n  let baseUrl: string;\n  // 判断生产环境和测试环境\n  const env = process.env;\n  const type = env.REACT_APP_ENV;\n  // 判断浏览器(是electron才能用生产接口)\n  // const isElectron = navigator.userAgent.includes('Electron');\n\n  // console.log(isElectron);\n  // console.log(type);\n\n  switch (type) {\n    case 'dev':\n      // 测试环境\n      baseUrl = env.REACT_APP_DEV!;\n      break;\n    case 'test':\n      // 测试环境\n      baseUrl = env.REACT_APP_TEST!;\n      break;\n    case 'bug':\n      // bug环境\n      baseUrl = env.REACT_APP_BUG!;\n      break;\n    case 'prod':\n      // 生产环境\n      baseUrl = env.REACT_APP_PROD!;\n      break;\n    default:\n      // 开发环境\n      // baseUrl = env.REACT_APP_TEST!;\n      // baseUrl = env.REACT_APP_BUG!;\n      baseUrl = '/api';\n      break;\n  }\n  return baseUrl;\n};\n/**\n * @baseURL 基本rul\n * @timeout 设置超时时间\n */\nclass JiayunAxios {\n  private instance: AxiosInstance;\n  constructor(baseURL: string, timeout: number) {\n    this.instance = axios.create({ baseURL, timeout });\n    this.setInterceptors(this.instance);\n  }\n  /**\n   * 设置拦截器\n   */\n  private setInterceptors = (instance: AxiosInstance): void => {\n    // 请求拦截器\n    instance.interceptors.request.use(\n      (config: AxiosRequestConfig): AxiosRequestConfig => {\n        // 设置头部\n        config.headers['access-source'] = 'cwq9r3rZwyYsSStqDmiJ5A7pp4YQtcGt';\n        if (config.url) {\n          // 加token的判断 (加true 不加false)\n          if (config.headers.isToken) {\n            const token = sessionStorage.getItem('token');\n            config.headers['Authorization'] = token ? token : '';\n            delete config.headers.isToken;\n          }\n        }\n        // 根据需要显示，在header中加入isLoding ture显示loading\n        if (config.headers.isLoading) {\n          showLoading();\n          delete config.headers.isLoading;\n        }\n        return config;\n      },\n      (err: Error) => Promise.reject(err)\n    );\n    // 响应拦截器\n    instance.interceptors.response.use(\n      (response: AxiosResponse<ResponseData<any>>) => {\n        // 移除loading\n        hideLoading();\n        // 修改成功返回为data = null 在组件中一律判断null不为空即可\n        let { success, data } = response.data;\n        if (success && data === null) {\n          response.data.data = {};\n        }\n        return response;\n      },\n      (err: ErrorMessageIF) => {\n        // 移除loading\n        hideLoading();\n        // 超时处理\n        if (err.message.includes('timeout')) {\n          message.error('链接超时，请稍后重试', 5);\n        }\n        // 错误代码处理\n        if (err.response?.status) {\n          // 响应错误码提示;\n          this._httpsHandle(err.response.data);\n          message.error(CodeMessage[err.response.status], 5);\n          return Promise.reject(err.response);\n        }\n        // 断网处理  跳转到断网页面\n        if (!window.navigator.onLine) {\n          message.error('网络链接失败', 5);\n          return -1;\n        }\n        return Promise.reject(err);\n      }\n    );\n  };\n\n  /**\n   *axios 请求方法返回data中内容\n   *@axios 请求调用的方法\n   *@url 请求地址\n   *@params 请求参数\n   *@type 可以传区分json和formdata 默认formdata\n   */\n  public requstAll = <T>({\n    url,\n    params,\n    type,\n    isLoading,\n    successMessage,\n    error,\n    method,\n  }: AxiosParams): Promise<T> => {\n    const headers = this._setHeaders({ type, isLoading, url });\n    const data = method === 'post' ? 'data' : 'params';\n    if (params && params.hasOwnProperty('isLoading')) {\n      delete params['isLoading'];\n    }\n    return new Promise((resolve, reject) => {\n      this.instance({\n        method,\n        url,\n        [data]: params,\n        headers,\n      })\n        .then((res: AxiosResponse<ResponseData<T>>) => {\n          const data = res.data;\n          this._showError(data, successMessage, error);\n          if (data.success) {\n            resolve(data.data);\n          }\n        })\n        .catch((err: Error) => {\n          reject(err);\n        });\n    });\n  };\n\n  // post方法\n  public axiosPost = async <T>({\n    url,\n    params,\n    type,\n    isLoading,\n    successMessage,\n    error,\n  }: AxiosParams): Promise<T> => {\n    return await this.requstAll({\n      url,\n      params,\n      type,\n      isLoading,\n      successMessage,\n      error,\n      method: 'post',\n    });\n  };\n\n  // get 方法\n  public axiosGet = async <T>({\n    url,\n    params,\n    type,\n    isLoading,\n    successMessage,\n    error,\n  }: AxiosParams): Promise<T> => {\n    return await this.requstAll({\n      url,\n      params,\n      type,\n      isLoading,\n      successMessage,\n      error,\n      method: 'get',\n    });\n  };\n\n  // delete方法返回\n  public axiosDelete = async <T>({\n    url,\n    params,\n    type,\n    isLoading,\n    successMessage,\n    error,\n  }: AxiosParams): Promise<T> => {\n    return await this.requstAll({\n      url,\n      params,\n      type,\n      isLoading,\n      successMessage,\n      error,\n      method: 'delete',\n    });\n  };\n  /**\n   * get获取二进制流中的文件\n   *@url 请求地址\n   *@params 请求参数\n   */\n  fetchGetFile<T>({ url, params, type, isLoading }: AxiosParams): Promise<T> {\n    const headers = this._setHeaders({ type, isLoading, url });\n    return new Promise((resolve, reject) => {\n      this.instance({\n        method: 'get',\n        url,\n        params,\n        headers,\n        responseType: 'blob',\n      })\n        .then((res: AxiosResponse<T>) => {\n          const data = res.data;\n          resolve(data);\n        })\n        .catch((err: Error) => {\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * 错误处理\n   * @data\n   * @successMessage\n   * @error\n   */\n  _showError = <T>(\n    data: ResponseData<T>,\n    successMessage: string | undefined,\n    error: string | undefined\n  ) => {\n    // 显示传入的接口成功的提示消息\n    if (data.success && successMessage) {\n      message.success(successMessage);\n    }\n    // 显示错误信息\n    if (!data.success && error !== 'no') {\n      message.error(error ? error : data.stateInfo, 5);\n    }\n  };\n\n  /**\n   * @param type 传入json或者不传，传json则用application/json\n   * 不传用formdata\n   */\n  _setHeaders = ({\n    type,\n    isLoading,\n    url,\n  }: HeadersModelIF): { 'Content-Type': string; isLoading: boolean } => {\n    let headers = { 'Content-Type': 'application/json', isLoading, isToken: true };\n    if (url.includes('不需要token的接口')) {\n      headers.isToken = false;\n    }\n    if (type === 'json') {\n      headers['Content-Type'] = 'application/json';\n    } else {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    }\n    return headers;\n  };\n\n  // http错误代码中的特殊处理\n  _httpsHandle(data: ResponseData<null>) {\n    if (data.stateCode === '30000004') {\n      openNotificationWithIcon();\n      setTimeout(() => {\n        window.location.href = '/';\n      }, 2000);\n    }\n  }\n}\n\nconst JYAxios = new JiayunAxios(getBaseUrl(), 10000);\n\nexport { JYAxios };\n"]},"metadata":{},"sourceType":"module"}